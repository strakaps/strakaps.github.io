<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extremes on Peter Straka</title>
    <link>/tags/extremes/</link>
    <description>Recent content in Extremes on Peter Straka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Fri, 11 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/extremes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>R package CTRE: thresholding bursty time series</title>
      <link>/post/ctre-package/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/ctre-package/</guid>
      <description>The new R package CTRE is now available on CRAN. “CTRE” means “Continuous Time Random Exceedances”, which is a model for extreme values of bursty time series.
library(CTRE) flares_ctre &amp;lt;- ctre(flares) plot(flares_ctre, log = &amp;quot;y&amp;quot;, main = &amp;quot;Solar Flares&amp;quot;) The above time series are measurements of solar flare magnitudes by NASA1. Which observations are considered extreme is defined by a variable threshold \(u\) (dashed line, \(&amp;lt; 5\%\) of observations). The exceedances of this threshold (red) follow (asymptotically for high \(u\)) a Generalized Pareto distribution Generalized Pareto distribution.</description>
    </item>
    
    <item>
      <title>A Shiny app to explore bursty extremes</title>
      <link>/post/shiny-bursty-extremes/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/shiny-bursty-extremes/</guid>
      <description>Suppose you want to model time series data with irregularly spaced events, and suppose your main focus is the timing and the size of the extreme events. The max-renewal process is a conceptually easy model that does this… and now there’s an app that can fit it to data:
 Irregular spacing The renewal process does simple i.i.d. draws \(W_i\) from a distribution, and uses these as waiting times between events.</description>
    </item>
    
  </channel>
</rss>